import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JTextField;
import javax.swing.JFormattedTextField;
import java.awt.Font;
import javax.swing.JTextPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import java.awt.FlowLayout;
import javax.swing.BoxLayout;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.FormSpecs;
import com.jgoodies.forms.layout.RowSpec;
import net.miginfocom.swing.MigLayout;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.Dialog.ModalExclusionType;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Date;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.awt.Toolkit;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.JList;
import javax.swing.AbstractListModel;
import javax.swing.JSpinner;
import javax.swing.JSplitPane;
import javax.swing.JButton;
import java.awt.Button;
import javax.swing.ImageIcon;
import javax.swing.SwingConstants;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.border.BevelBorder;
import javax.swing.border.CompoundBorder;
import javax.swing.border.SoftBevelBorder;

public class TelaPrincipal extends JFrame {

	private JPanel mainPanel;
	private JPanel namePanel;
	private JPanel buttonPanel;
	private JTable table;
	private JScrollPane scrollPane;

	// Cria a lista
	private static Lista minhaLista = new Lista();

	// Cria classe data (que pega o mes e o ano atual)
	private static Datas data = new Datas();

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {

		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					TelaPrincipal frame = new TelaPrincipal();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public TelaPrincipal() {

		// Seta o mes atual como o inicial
		data.setMes(data.getNumMesAtual());

		// Carrega o arquivo com o nome do mês atual

		minhaLista.carregaLista(data.getMes());

		setIconImage(Toolkit.getDefaultToolkit()
				.getImage(TelaPrincipal.class.getResource("/windowBuilder/images/Lion-48.png")));

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setTitle("Programa para Controle de Despesas 1.0");
		setBounds(100, 100, 960, 600);
		setLocationRelativeTo(null); // Tela no meio
		mainPanel = new JPanel();
		mainPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(mainPanel);
		mainPanel.setLayout(new BorderLayout(0, 0));

		namePanel = new JPanel();
		mainPanel.add(namePanel, BorderLayout.SOUTH);

		JLabel lblMaurcioOliveiraMonti = new JLabel("Maur\u00EDcio Oliveira Monti");
		lblMaurcioOliveiraMonti.setFont(new Font("Harlow Solid Italic", Font.ITALIC, 12));

		JLabel lblMauricioomontigmailcom = new JLabel("mauricioomonti@gmail.com");
		lblMauricioomontigmailcom.setFont(new Font("Harlow Solid Italic", Font.ITALIC, 12));
		GroupLayout gl_namePanel = new GroupLayout(namePanel);
		gl_namePanel.setHorizontalGroup(gl_namePanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_namePanel.createSequentialGroup().addComponent(lblMaurcioOliveiraMonti)
						.addPreferredGap(ComponentPlacement.RELATED, 683, Short.MAX_VALUE)
						.addComponent(lblMauricioomontigmailcom)));
		gl_namePanel.setVerticalGroup(gl_namePanel.createParallelGroup(Alignment.TRAILING).addGroup(
				gl_namePanel.createSequentialGroup().addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(gl_namePanel.createParallelGroup(Alignment.BASELINE)
								.addComponent(lblMaurcioOliveiraMonti).addComponent(lblMauricioomontigmailcom))));
		namePanel.setLayout(gl_namePanel);

		buttonPanel();

		tabelaPagamentos();
	}

	/**
	 * Painel dos botões
	 */
	private void buttonPanel() {
		buttonPanel = new JPanel();
		mainPanel.add(buttonPanel, BorderLayout.WEST);

		JButton btnAdicionarNovoPagamento = new JButton("Adicionar Novo Pagamento");
		btnAdicionarNovoPagamento.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				adicionaLinha();

			}
		});
		btnAdicionarNovoPagamento.setIcon(
				new ImageIcon(TelaPrincipal.class.getResource("/windowBuilder/images/Stork With Bundle-48.png")));

		JButton btnRemoverPagamentosSelecionados = new JButton("Remover Pagamento Selecionado");
		btnRemoverPagamentosSelecionados.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				deletaLinhaSelecionada();

			}
		});
		btnRemoverPagamentosSelecionados.setIcon(new ImageIcon(
				TelaPrincipal.class.getResource("/windowBuilder/images/Flying Stork With Bundle-48.png")));

		JButton btnSalvar = new JButton("SALVAR");
		btnSalvar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				gravaLista();

			}
		});

		btnSalvar.setFont(new Font("Jokerman", Font.PLAIN, 33));
		btnSalvar.setIcon(new ImageIcon(TelaPrincipal.class.getResource("/windowBuilder/images/Save-96.png")));

		JLabel lblTotalFaltante = new JLabel("Total Faltante:");
		lblTotalFaltante.setFont(new Font("Arial", Font.BOLD, 18));

		JLabel lblTotalPago = new JLabel("Total Pago:");
		lblTotalPago.setFont(new Font("Arial", Font.BOLD, 18));

		JButton btnNewButton = new JButton("M\u00EAs Anterior");
		btnNewButton.setIcon(new ImageIcon(TelaPrincipal.class.getResource("/windowBuilder/images/Left-24.png")));
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				carregaMesAnterior();

			}
		});

		JButton btnNewButton_1 = new JButton("M\u00EAs Posterior");
		btnNewButton_1.setIcon(new ImageIcon(TelaPrincipal.class.getResource("/windowBuilder/images/Right-24.png")));
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				carregaMesPosterior();

			}
		});

		JLabel lblMsAtual = new JLabel("M\u00EAs Atual:");
		lblMsAtual.setFont(new Font("Arial", Font.BOLD, 18));

		GroupLayout gl_buttonPanel = new GroupLayout(buttonPanel);
		gl_buttonPanel.setHorizontalGroup(gl_buttonPanel.createParallelGroup(Alignment.TRAILING).addGroup(gl_buttonPanel
				.createSequentialGroup()
				.addGroup(gl_buttonPanel.createParallelGroup(Alignment.TRAILING)
						.addComponent(btnAdicionarNovoPagamento, GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
						.addComponent(btnRemoverPagamentosSelecionados, GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
						.addComponent(btnSalvar, GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
						.addGroup(gl_buttonPanel.createSequentialGroup().addGroup(gl_buttonPanel
								.createParallelGroup(Alignment.TRAILING)
								.addComponent(btnNewButton, GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
								.addGroup(gl_buttonPanel.createSequentialGroup().addContainerGap().addComponent(
										lblTotalPago, GroupLayout.PREFERRED_SIZE, 125, GroupLayout.PREFERRED_SIZE))
								.addGroup(gl_buttonPanel.createSequentialGroup().addContainerGap().addComponent(
										lblMsAtual, GroupLayout.PREFERRED_SIZE, 125, GroupLayout.PREFERRED_SIZE))
								.addGroup(gl_buttonPanel.createSequentialGroup().addContainerGap()
										.addComponent(lblTotalFaltante)))
								.addPreferredGap(ComponentPlacement.RELATED).addComponent(btnNewButton_1)))
				.addContainerGap()));
		gl_buttonPanel.setVerticalGroup(gl_buttonPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_buttonPanel.createSequentialGroup().addComponent(btnAdicionarNovoPagamento)
						.addPreferredGap(ComponentPlacement.RELATED).addComponent(btnRemoverPagamentosSelecionados)
						.addGap(39).addComponent(lblTotalFaltante).addGap(41)
						.addComponent(lblTotalPago, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
						.addGap(43).addComponent(lblMsAtual, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
						.addGroup(gl_buttonPanel.createParallelGroup(Alignment.BASELINE).addComponent(btnNewButton)
								.addComponent(btnNewButton_1))
						.addPreferredGap(ComponentPlacement.RELATED).addComponent(btnSalvar)));
		buttonPanel.setLayout(gl_buttonPanel);
	}

	/**
	 * Tabela:
	 */
	private void tabelaPagamentos() {
		scrollPane = new JScrollPane();
		mainPanel.add(scrollPane, BorderLayout.CENTER);
		table = new JTable();
		table.setShowVerticalLines(true);
		table.setShowHorizontalLines(true);
		table.setForeground(new Color(0, 128, 0));
		scrollPane.setViewportView(table);
		table.setModel(new DefaultTableModel(new Object[][] {},
				new String[] { "Nome", "Valor", "Data", "Situa\u00E7\u00E3o" }) {
			Class[] columnTypes = new Class[] { String.class, Double.class, String.class, Boolean.class };

			public Class getColumnClass(int columnIndex) {
				return columnTypes[columnIndex];
			}
		});

		// Centraliza todas as linhas da tabela menos a ultima (3 colunas)
		for (int i = 0; i < table.getColumnCount() - 1; i++) {
			DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
			centerRenderer.setHorizontalAlignment(JLabel.CENTER);
			table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
		}

		// Carrega todas a lista com os pagamentos no inicio da tabela
		carregaTabela(minhaLista);
	}

	private void gravaLista() {

		// Remove todos os elementos da lista
		minhaLista.limpaLista();

		// Recebe o valor de cada celula e grava no objeto pagamento para
		// adicionar no objeto lista posteriormente
		for (int linha = 0; linha < table.getRowCount(); linha++) {
			// Cria uma classe pagamento para armazenar os dados e adicionar na
			// classe lista
			Pagamentos pagamento = new Pagamentos();
			for (int coluna = 0; coluna < table.getColumnCount(); coluna++) {

				System.out.println(table.getModel().getValueAt(linha, coluna));

				switch (coluna) {
				case 0: // Nome
					// Se o valor não existe substitui por um valido para
					// gravação
					if (table.getModel().getValueAt(linha, coluna) == null) {
						pagamento.setNome("");
					} else {
						pagamento.setNome(table.getModel().getValueAt(linha, coluna).toString().trim());
					}

					break;
				case 1: // Valor
					// Se o valor não existe substitui por um valido para
					// gravação
					if (table.getModel().getValueAt(linha, coluna) == null) {
						pagamento.setValor(0.0);
					} else {
						pagamento.setValor(
								Double.parseDouble(table.getModel().getValueAt(linha, coluna).toString().trim()));
					}
					break;
				case 2: // Data
					// Se o valor não existe substitui por um valido para
					// gravação
					if (table.getModel().getValueAt(linha, coluna) == null) {
						pagamento.setData("00/00/0000");
					} else {
						pagamento.setData(table.getModel().getValueAt(linha, coluna).toString().trim());
					}
					break;
				case 3: // Estado
					// Se o valor não existe substitui por um valido para
					// gravação
					if (table.getModel().getValueAt(linha, coluna) == null) {
						pagamento.setEstado(
								Boolean.parseBoolean(table.getModel().getValueAt(linha, coluna).toString().trim()));
					} else {
						pagamento.setEstado(
								Boolean.parseBoolean(table.getModel().getValueAt(linha, coluna).toString().trim()));
					}
					break;

				}

			}
			minhaLista.newPagamento(pagamento);
		}

		minhaLista.salvaLista(data.getMes());
		JOptionPane.showMessageDialog(null, "SALVO !!!");
	}

	private void deletaLinhaSelecionada() {

		if (table.getSelectedRow() < 0) {
			JOptionPane.showMessageDialog(null, "Por Favor Selecione Uma Linha");
		} else {
			// Remove linha selecionada no momento
			DefaultTableModel model = (DefaultTableModel) table.getModel();
			model.removeRow(table.getSelectedRow());
		}
	}

	private void adicionaLinha() {
		DefaultTableModel model = (DefaultTableModel) table.getModel();
		model.addRow(new Object[] { null, null });
	}

	private void carregaMesAnterior() {

		// Vai para o mes anterior
		data.setMes(data.getNumMes() - 1);

		if (minhaLista.verificaMes(data.getMes()) == false) {
			int answer = JOptionPane.showConfirmDialog(null, "Mês não encontrado, Deseja criar um novo?", "Aviso",
					JOptionPane.YES_NO_OPTION);
			if (answer == 0) {
				JOptionPane.showMessageDialog(null, "Criado mês de " + data.getMes());

				// Cria uma nova lista e arquivo
				minhaLista.limpaLista();
				minhaLista.salvaLista(data.getMes());

				carregaTabela(minhaLista);

			} else {
				// Volta para o mes em que estava e não faz nada
				data.setMes(data.getNumMes() + 1);
				JOptionPane.showMessageDialog(null, "Voltou para o mês " + data.getMes());
				return;
			}
		}

		// Carrega a lista do mes anterior
		minhaLista.carregaLista(data.getMes());

		carregaTabela(minhaLista);
	}

	private void carregaMesPosterior() {

		// Vai para o mes anterior
		data.setMes(data.getNumMes() + 1);

		if (minhaLista.verificaMes(data.getMes()) == false) {
			int answer = JOptionPane.showConfirmDialog(null, "Mês não encontrado, Deseja criar um novo?", "Aviso",
					JOptionPane.YES_NO_OPTION);
			if (answer == 0) {
				JOptionPane.showMessageDialog(null, "Criado mês de " + data.getMes());

				// Cria uma nova lista e arquivo
				minhaLista.limpaLista();
				minhaLista.salvaLista(data.getMes());

				carregaTabela(minhaLista);

			} else {
				// Volta para o mes em que estava e não faz nada
				data.setMes(data.getNumMes() - 1);
				JOptionPane.showMessageDialog(null, "Voltou para o mês " + data.getMes());
				return;
			}
		}

		// Carrega a lista do mes posterior
		minhaLista.carregaLista(data.getMes());

		carregaTabela(minhaLista);
	}

	// Usado por varios metodos para limpar e carregar a lista com novos dados
	private void carregaTabela(Lista lista) {

		DefaultTableModel model = (DefaultTableModel) table.getModel();

		while (model.getRowCount() > 0) {
			model.removeRow(0);
		}

		for (int i = 0; i < lista.getTamanhoLista(); i++) {
			DefaultTableModel dm = (DefaultTableModel) table.getModel();
			dm.addRow(new Object[] { lista.getListaPagamento().get(i).getNome(),
					lista.getListaPagamento().get(i).getValor(), lista.getListaPagamento().get(i).getStringData(),
					lista.getListaPagamento().get(i).getEstado() });
		}
	}
}
